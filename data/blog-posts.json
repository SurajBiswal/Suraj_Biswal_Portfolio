[
  {
    "id": 1,
    "title": "Leetcode 230: Kth Smallest Element in a BST",
    "slug": "kth-smallest-element-in-a-bst",
    "category": "dsa",
    "excerpt": "Find the k-th smallest element in a Binary Search Tree using in-order traversal. Covers both recursive and iterative Java solutions with complexity analysis.",
    "content": "### Problem Statement\nGiven:\n- A Binary Search Tree (BST) represented by its root node\n- An integer k\n\nGoal:\nReturn the k-th smallest value in the tree when the elements are considered in ascending order.\n\n### Example 1:\nInput: root = [3,1,4,null,2], k = 1  \nOutput: 1\n\n### Example 2:\nInput: root = [5,3,6,2,4,null,null,1], k = 3  \nOutput: 3\n\n---\n\n### Intuition\nA Binary Search Tree inherently supports fast retrieval of sorted data using in-order traversal.\nIn an in-order traversal, we visit nodes in this order:\nLeft subtree ‚Üí Node ‚Üí Right subtree\n\nThis pattern guarantees that the values are accessed in ascending order. So, by counting nodes during in-order traversal, the k-th visited node is the k-th smallest value in the BST.\n\n---\n\n### Approach 1: Recursive In-order Traversal\nThe idea is simple:\n- Perform an in-order traversal\n- Keep a count of how many nodes have been visited\n- As soon as the count reaches k, store the node value and stop the traversal\n\nThis approach uses a recursive helper function to navigate the tree and class-level variables to track the count and result.\n\n#### Java Code:\n```java\nclass Solution {\n    private int node = -1;\n    private int count = 0;\n\n    public int kthSmallest(TreeNode root, int k) {\n        helper(root, k);\n        return node;\n    }\n\n    private boolean helper(TreeNode root, int k) {\n        if (root == null) return false;\n\n        if (helper(root.left, k)) return true;\n\n        count++;\n        if (count == k) {\n            node = root.val;\n            return true;\n        }\n\n        return helper(root.right, k);\n    }\n}\n```\n\n#### Time Complexity:\n- Best case: O(k) if the target node is found early\n- Worst case: O(n) if the traversal visits all nodes\n\n#### Space Complexity:\n- Depends on the height of the tree due to recursion stack\n- O(log n) for balanced trees\n- O(n) for skewed trees\n\n---\n\n### Approach 2: Iterative In-order Traversal\nInstead of recursion, simulate in-order traversal using a stack for better control.\n\nSteps:\n- Use a stack to explore left children until reaching the leftmost node\n- Pop the node, decrease k, and check if it's the k-th element\n- If not, move to the right subtree and continue\n\n#### Java Code:\n```java\nclass Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        Stack<TreeNode> st = new Stack<>();\n\n        while (root != null || !st.isEmpty()) {\n            while (root != null) {\n                st.push(root);\n                root = root.left;\n            }\n\n            root = st.pop();\n            k--;\n            if (k == 0) return root.val;\n\n            root = root.right;\n        }\n\n        return -1; // fallback if k is out of range\n    }\n}\n```\n\n#### Time Complexity:\n- O(h + k), where h is the height of the tree\n- O(log n + k) for balanced trees\n- O(n) for skewed trees\n\n#### Space Complexity:\n- O(h), as the stack stores up to h nodes\n\n---\n\n### Conclusion\nTo find the k-th smallest element in a BST:\n- Use in-order traversal, as it retrieves values in sorted order\n- The recursive method is clean but can be inefficient for deep trees\n- The iterative method avoids recursion and is preferred for larger datasets\n\nBoth approaches solve the problem effectively. Choose based on context, tree structure, and system constraints.",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-22",
    "readTime": "6 min read",
    "tags": [
      "binary-search-tree",
      "inorder-traversal",
      "kth-element",
      "bst",
      "leetcode"
    ],
    "featured": true
  },
  {
    "id": 2,
    "title": "Graph Problems Solved: DFS, BFS, Cycle Detection, and More",
    "slug": "graph-problems-solved-dfs-bfs-cycle-detection-and-more",
    "category": "dsa",
    "excerpt": "Explore graph algorithms including depth-first search, breadth-first search, cycle detection, and shortest path algorithms with practical implementations.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "13 min read",
    "tags": [
      "graphs",
      "dfs",
      "bfs",
      "algorithms",
      "cycle-detection",
      "shortest-path"
    ],
    "featured": false
  },
  {
    "id": 3,
    "title": "Top Array Interview Problems: Sliding Window to Two Pointers",
    "slug": "top-array-interview-problems-sliding-window-to-two-pointers",
    "category": "dsa",
    "excerpt": "Master array manipulation techniques from sliding window to two pointers, with optimized solutions for the most common interview problems.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "8 min read",
    "tags": [
      "arrays",
      "sliding-window",
      "two-pointers",
      "algorithms",
      "interview-prep"
    ],
    "featured": true
  },
  {
    "id": 4,
    "title": "Mastering Recursion and Backtracking",
    "slug": "mastering-recursion-and-backtracking",
    "category": "dsa",
    "excerpt": "Deep dive into recursion and backtracking techniques with solutions to classic problems like N-Queens, Sudoku Solver, and generating subsets and permutations.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "12 min read",
    "tags": [
      "recursion",
      "backtracking",
      "algorithms",
      "n-queens",
      "sudoku",
      "permutations"
    ],
    "featured": false
  },
  {
    "id": 5,
    "title": "The Singleton Pattern in Java: Design, Use Cases & Best Practices",
    "slug": "singleton-pattern-java",
    "category": "system-design",
    "excerpt": "Understand how the Singleton Pattern ensures a single instance of a class across an application. Learn its variations, real-world use cases, and thread-safe implementations in Java.",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-22",
    "readTime": "9 min read",
    "tags": [
      "singleton-pattern",
      "java",
      "design-patterns",
      "low-level-design",
      "system-design"
    ],
    "content": "When building systems that need shared access to a single object‚Äîlike a logging service, config manager, or database connection pool‚Äîyou need to make sure only one instance of that object exists throughout your app. That‚Äôs exactly what the **Singleton Design Pattern** solves.\n\nThe **Singleton Pattern** ensures a class has **only one instance** and provides a **global access point** to it.\n\n---\n\n## üß© Why Use Singleton?\n- Avoids resource wastage by reusing the same object.\n- Maintains consistent access to shared services.\n- Coordinates system-wide operations through one unified point.\n\nUse cases include:\n- Logger services\n- Thread pool executors\n- Configuration managers\n- Cache handlers\n\n---\n\n## üèóÔ∏è Ways to Implement Singleton Pattern\n\nThere are two common ways:\n\n### 1Ô∏è‚É£ Eager Initialization (Early Instantiation)\nThe object is created at the time the class is loaded.\n\n#### ‚úÖ Advantages:\n- Simple to implement\n- Thread-safe by default (due to class loading mechanics)\n\n#### ‚ùå Disadvantages:\n- Memory wastage if the object is never used\n- Delays startup if initialization is heavy\n\n```java\nclass Singleton {\n   private static final Singleton INSTANCE = new Singleton();\n\n   private Singleton() {}\n\n   public static Singleton getInstance() {\n       return INSTANCE;\n   }\n}\n```\n\n**Key Notes:**\n- The `private` constructor prevents external instantiation\n- `static final` ensures it's created once and not reassigned\n- Best suited for lightweight objects needed throughout the app\n\nüí° Real-World Example: JDBC Driver Manager initializes a singleton at load time.\n\n---\n\n### 2Ô∏è‚É£ Lazy Initialization (On-Demand Instantiation)\nObject is created only when it's needed.\n\n#### ‚úÖ Advantages:\n- Saves memory and avoids early initialization\n- Great for expensive objects used occasionally\n\n#### ‚ùå Disadvantages:\n- Not thread-safe unless handled manually\n- Can break the singleton guarantee in multi-threaded apps\n\n```java\nclass Singleton {\n   private static Singleton instance;\n\n   private Singleton() {}\n\n   public static Singleton getInstance() {\n       if (instance == null) {\n           instance = new Singleton();\n       }\n       return instance;\n   }\n}\n```\n\nüí° Real-World Example: Database connection pools where connections are established only when needed.\n\n---\n\n## üßµ Thread Safety in Lazy Initialization\n\n### üö® Problem:\nIf two threads call `getInstance()` at the same time when `instance` is null, they may both create new instances, violating singleton behavior.\n\n### üîπ Fix 1: Synchronized Method (Simple but Slower)\n\n```java\nclass Singleton {\n   private static Singleton instance;\n   private Singleton() {}\n\n   public static synchronized Singleton getInstance() {\n       if (instance == null) {\n           instance = new Singleton();\n       }\n       return instance;\n   }\n}\n```\n\n**Pros:**\n- Thread-safe\n\n**Cons:**\n- Every call is synchronized, which impacts performance even after instance creation\n\n---\n\n### üèÜ Fix 2: Double-Checked Locking (Best Practice)\n\n```java\nclass Singleton {\n   private static volatile Singleton instance;\n   private Singleton() {}\n\n   public static Singleton getInstance() {\n       if (instance == null) {\n           synchronized (Singleton.class) {\n               if (instance == null) {\n                   instance = new Singleton();\n               }\n           }\n       }\n       return instance;\n   }\n}\n```\n\n**Why it‚Äôs best:**\n- First check avoids locking after initialization\n- `synchronized` ensures only one thread initializes\n- `volatile` ensures visibility across threads and prevents half-constructed objects from being used\n\n---\n\n## üîç Choosing Between Eager and Lazy Initialization\n\nUse **Eager Initialization** when:\n- The instance is always required during the app lifecycle\n- The object is lightweight\n- You want built-in thread safety with no extra effort\n\nUse **Lazy Initialization with Double-Checked Locking** when:\n- Object creation is expensive and should be deferred\n- You're working in a multi-threaded environment\n- You want memory efficiency and thread safety\n\nAvoid **Simple Lazy Initialization** (without thread safety) when:\n- The application runs with multiple threads\n- You care about maintaining strict singleton guarantees\n\n---\n\n## üéØ Key Takeaways\n- Singleton ensures that a single shared object is reused everywhere\n- Use eager loading for simple always-needed objects\n- Use lazy + DCL for performance-heavy and thread-safe requirements\n- Don‚Äôt forget `volatile` for correct behavior in concurrent systems\n\n> üí° With the right implementation, Singleton simplifies your architecture and reduces bugs related to shared state.\n\nHappy Coding! üöÄ"
  },
  {
    "id": 6,
    "title": "OS Concepts for Interviews: Threads, Scheduling, and Deadlocks",
    "slug": "os-concepts-for-interviews-threads-scheduling-and-deadlocks",
    "category": "cs-fundamentals",
    "excerpt": "A comprehensive guide to operating system concepts essential for technical interviews, including process management, thread synchronization, and deadlock prevention.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "7 min read",
    "tags": [
      "operating-systems",
      "threads",
      "process-scheduling",
      "deadlocks",
      "concurrency",
      "memory-management"
    ],
    "featured": false
  },
  {
    "id": 7,
    "title": "DBMS Simplified: Transactions, Isolation Levels, and Indexing",
    "slug": "dbms-simplified-transactions-isolation-levels-and-indexing",
    "category": "cs-fundamentals",
    "excerpt": "Demystifying database management systems with a focus on transaction processing, isolation levels, concurrency control, and indexing strategies.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "10 min read",
    "tags": [
      "dbms",
      "transactions",
      "acid",
      "isolation-levels",
      "indexing",
      "normalization"
    ],
    "featured": true
  },
  {
    "id": 8,
    "title": "Computer Networks for Developers: HTTP, DNS, Load Balancing",
    "slug": "computer-networks-for-developers-http-dns-load-balancing",
    "category": "cs-fundamentals",
    "excerpt": "An application-focused approach to computer networking, covering protocols, DNS resolution, load balancing, and content delivery networks relevant to developers.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "12 min read",
    "tags": ["networking", "http", "dns", "tcp-ip", "load-balancing", "cdn"],
    "featured": false
  },
  {
    "id": 9,
    "title": "React Patterns for Scalable Frontend Development",
    "slug": "react-patterns-for-scalable-frontend-development",
    "category": "web-development",
    "excerpt": "Explore advanced React patterns and architectures that enable building maintainable, scalable frontend applications for enterprise environments.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "7 min read",
    "tags": [
      "react",
      "frontend",
      "design-patterns",
      "component-architecture",
      "state-management",
      "hooks"
    ],
    "featured": true
  },
  {
    "id": 10,
    "title": "Mastering JavaScript: Closures, Event Loop, and Async Patterns",
    "slug": "mastering-javascript-closures-event-loop-and-async-patterns",
    "category": "web-development",
    "excerpt": "Deep dive into JavaScript's core concepts including closures, execution context, the event loop, and asynchronous programming patterns.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "6 min read",
    "tags": [
      "javascript",
      "closures",
      "event-loop",
      "async-await",
      "promises",
      "functional-programming"
    ],
    "featured": false
  },
  {
    "id": 11,
    "title": "Web Performance Optimization: Lazy Loading, Debouncing, and More",
    "slug": "web-performance-optimization-lazy-loading-debouncing-and-more",
    "category": "web-development",
    "excerpt": "Practical techniques to optimize web application performance, from code splitting and lazy loading to debouncing user interactions and resource prioritization.",
    "content": "Coming soon...",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-21",
    "readTime": "14 min read",
    "tags": [
      "performance",
      "lazy-loading",
      "debouncing",
      "code-splitting",
      "web-vitals",
      "optimization"
    ],
    "featured": true
  },
  {
    "id": 12,
    "title": "Strategy Design Pattern: Flexible Behavior at Runtime",
    "slug": "strategy-design-pattern-low-level",
    "category": "system-design",
    "excerpt": "Understand the Strategy Design Pattern through a real-world Duck Simulation example. Learn how to encapsulate behaviors, follow the Open/Closed Principle, and allow runtime flexibility.",
    "content": "## Strategy Design Pattern Explanation\n\nThe Strategy Pattern is a behavioral design pattern that allows selecting an algorithm (or behavior) at runtime. Instead of defining multiple behaviors in a single class, we encapsulate them in separate classes and make them interchangeable.\n\nIt follows the **Open/Closed Principle**, meaning new behaviors can be added without modifying existing code.\n\n---\n\n### ü¶Ü Real-World Example: Duck Simulation\nImagine a Duck Simulation game where different ducks have different flying and quacking behaviors:\n- Some ducks fly with wings\n- Some can't fly (rubber ducks)\n- Some quack loudly\n- Some stay silent (wooden ducks)\n\n---\n\n### üõ† Step 1: Create Behavior Interfaces\n```java\n// Fly behavior\ninterface FlyBehavior {\n    void fly();\n}\n\nclass FlyWithWings implements FlyBehavior {\n    public void fly() {\n        System.out.println(\"I'm flying with wings!\");\n    }\n}\n\nclass NoFly implements FlyBehavior {\n    public void fly() {\n        System.out.println(\"I can't fly.\");\n    }\n}\n\n// Quack behavior\ninterface QuackBehavior {\n    void quack();\n}\n\nclass QuackLoud implements QuackBehavior {\n    public void quack() {\n        System.out.println(\"Quack! Quack!\");\n    }\n}\n\nclass SilentQuack implements QuackBehavior {\n    public void quack() {\n        System.out.println(\"...\");\n    }\n}\n```\n\n---\n\n### ü¶¢ Step 2: Define the Duck Base Class\n```java\nabstract class Duck {\n    FlyBehavior flyBehavior;\n    QuackBehavior quackBehavior;\n\n    public void performFly() {\n        flyBehavior.fly();\n    }\n\n    public void performQuack() {\n        quackBehavior.quack();\n    }\n\n    public void setFlyBehavior(FlyBehavior fb) {\n        this.flyBehavior = fb;\n    }\n\n    public void setQuackBehavior(QuackBehavior qb) {\n        this.quackBehavior = qb;\n    }\n\n    abstract void display();\n}\n```\n\n---\n\n### üß© Step 3: Implement Specific Ducks\n```java\nclass MallardDuck extends Duck {\n    public MallardDuck() {\n        flyBehavior = new FlyWithWings();\n        quackBehavior = new QuackLoud();\n    }\n\n    public void display() {\n        System.out.println(\"I'm a Mallard Duck.\");\n    }\n}\n\nclass RubberDuck extends Duck {\n    public RubberDuck() {\n        flyBehavior = new NoFly();\n        quackBehavior = new SilentQuack();\n    }\n\n    public void display() {\n        System.out.println(\"I'm a Rubber Duck.\");\n    }\n}\n```\n\n---\n\n### üß™ Step 4: Test the Pattern\n```java\npublic class DuckSimulator {\n    public static void main(String[] args) {\n        Duck mallard = new MallardDuck();\n        mallard.display();\n        mallard.performFly();\n        mallard.performQuack();\n\n        Duck rubberDuck = new RubberDuck();\n        rubberDuck.display();\n        rubberDuck.performFly();\n        rubberDuck.performQuack();\n\n        // Change behavior at runtime\n        rubberDuck.setFlyBehavior(new FlyWithWings());\n        System.out.println(\"Now the rubber duck learns to fly!\");\n        rubberDuck.performFly();\n    }\n}\n```\n\n---\n\n### ‚úÖ Key Benefits\n- **Encapsulation of behaviors** ‚Üí Separate reusable strategies\n- **Open/Closed Principle** ‚Üí Add behaviors without changing existing code\n- **Flexibility** ‚Üí Swap behaviors at runtime\n\n---\n\n### üîç Interview-Ready Summary\n> \"The Strategy Pattern allows dynamic behavior selection at runtime. It encapsulates interchangeable algorithms (strategies), enabling flexibility and adhering to the Open/Closed Principle. For example, different duck types can fly or quack differently using strategy classes.\"\n\n---\n\n### ‚ñ∂Ô∏è Execution Flow Explained\n| Step | Method Call | Behavior |\n|------|-------------|----------|\n| 1 | `Duck mallard = new MallardDuck();` | Sets fly & quack behavior |\n| 2 | `mallard.display();` | Prints `I'm a Mallard Duck.` |\n| 3 | `mallard.performFly();` | Prints `I'm flying with wings!` |\n| 4 | `mallard.performQuack();` | Prints `Quack! Quack!` |\n\n---\n\n### üß† Why Not Just Use Abstract Methods?\nUsing abstract `fly()` and `quack()` in each duck class:\n- ‚ùå Duplicates code\n- ‚ùå Cannot change behavior at runtime\n- ‚ùå Violates Open/Closed Principle\n\n---\n\n### ‚úÖ Why Strategy Pattern Wins\n- ‚úîÔ∏è Reusable behavior classes\n- ‚úîÔ∏è Behavior can change at runtime (`setFlyBehavior()`)\n- ‚úîÔ∏è Follows SOLID principles (especially OCP)\n\n---\n\n### üß® Need to Add Rocket Duck?\nJust create:\n```java\nclass FlyWithRocket implements FlyBehavior {\n    public void fly() {\n        System.out.println(\"I'm flying with a rocket!\");\n    }\n}\n```\nAnd assign:\n```java\nmallard.setFlyBehavior(new FlyWithRocket());\nmallard.performFly();\n```\n\n‚úîÔ∏è No need to touch `Duck` or `MallardDuck` classes!\n\n---\n\n### ‚úÖ Conclusion\nThe Strategy Pattern is essential for clean, extensible, and flexible design. It minimizes duplication, supports runtime flexibility, and aligns perfectly with the Open/Closed Principle ‚Äî making it a go-to choice for dynamic behavior management.",
    "author": "Suraj Biswal",
    "publishedDate": "2025-06-22",
    "readTime": "12 min read",
    "tags": [
      "strategy-pattern",
      "design-patterns",
      "low-level-design",
      "duck-simulation",
      "oop",
      "java"
    ],
    "featured": true
  }
]
